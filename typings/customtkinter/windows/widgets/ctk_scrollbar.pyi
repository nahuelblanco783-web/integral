"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Optional, Tuple, Union
from .core_widget_classes import CTkBaseClass

class CTkScrollbar(CTkBaseClass):
    """
    Scrollbar with rounded corners, configurable spacing.
    Connect to scrollable widget by passing .set() method and set command attribute.
    For detailed information check out the documentation.
    """
    def __init__(self, master: Any, width: Optional[Union[int, str]] = ..., height: Optional[Union[int, str]] = ..., corner_radius: Optional[int] = ..., border_spacing: Optional[int] = ..., minimum_pixel_length: int = ..., bg_color: Union[str, Tuple[str, str]] = ..., fg_color: Optional[Union[str, Tuple[str, str]]] = ..., button_color: Optional[Union[str, Tuple[str, str]]] = ..., button_hover_color: Optional[Union[str, Tuple[str, str]]] = ..., hover: bool = ..., command: Union[Callable, Any] = ..., orientation: str = ..., **kwargs) -> None:
        ...
    
    def configure(self, require_redraw=..., **kwargs): # -> None:
        ...
    
    def cget(self, attribute_name: str) -> any:
        ...
    
    def set(self, start_value: float, end_value: float): # -> None:
        ...
    
    def get(self): # -> tuple[float, float]:
        ...
    
    def bind(self, sequence=..., command=..., add=...): # -> None:
        """ called on the tkinter.Canvas """
        ...
    
    def unbind(self, sequence=..., funcid=...): # -> None:
        """ called on the tkinter.Canvas, restores internal callbacks """
        ...
    
    def focus(self):
        ...
    
    def focus_set(self): # -> None:
        ...
    
    def focus_force(self): # -> None:
        ...
    


