"""
This type stub file was generated by pyright.
"""

from typing import Callable, Optional, Tuple, Union
from .core_widget_classes import CTkBaseClass
from .font import CTkFont

class CTkTextbox(CTkBaseClass):
    """
    Textbox with x and y scrollbars, rounded corners, and all text features of tkinter.Text widget.
    Scrollbars only appear when they are needed. Text is wrapped on line end by default,
    set wrap='none' to disable automatic line wrapping.
    For detailed information check out the documentation.

    Detailed methods and parameters of the underlaying tkinter.Text widget can be found here:
    https://anzeljg.github.io/rin2/book2/2405/docs/tkinter/text.html
    (most of them are implemented here too)
    """
    _scrollbar_update_time = ...
    _valid_tk_text_attributes = ...
    def __init__(self, master: any, width: int = ..., height: int = ..., corner_radius: Optional[int] = ..., border_width: Optional[int] = ..., border_spacing: int = ..., bg_color: Union[str, Tuple[str, str]] = ..., fg_color: Optional[Union[str, Tuple[str, str]]] = ..., border_color: Optional[Union[str, Tuple[str, str]]] = ..., text_color: Optional[Union[str, str]] = ..., scrollbar_button_color: Optional[Union[str, Tuple[str, str]]] = ..., scrollbar_button_hover_color: Optional[Union[str, Tuple[str, str]]] = ..., font: Optional[Union[tuple, CTkFont]] = ..., activate_scrollbars: bool = ..., **kwargs) -> None:
        ...
    
    def destroy(self): # -> None:
        ...
    
    def configure(self, require_redraw=..., **kwargs): # -> None:
        ...
    
    def cget(self, attribute_name: str) -> any:
        ...
    
    def bind(self, sequence: str = ..., command: Callable = ..., add: Union[str, bool] = ...): # -> None:
        """ called on the tkinter.Canvas """
        ...
    
    def unbind(self, sequence: str = ..., funcid: str = ...):
        """ called on the tkinter.Label and tkinter.Canvas """
        ...
    
    def focus(self): # -> None:
        ...
    
    def focus_set(self): # -> None:
        ...
    
    def focus_force(self): # -> None:
        ...
    
    def insert(self, index, text, tags=...): # -> None:
        ...
    
    def get(self, index1, index2=...): # -> str:
        ...
    
    def bbox(self, index): # -> tuple[int, int, int, int] | None:
        ...
    
    def compare(self, index, op, index2): # -> bool:
        ...
    
    def delete(self, index1, index2=...): # -> None:
        ...
    
    def dlineinfo(self, index): # -> tuple[int, int, int, int, int] | None:
        ...
    
    def edit_modified(self, arg=...): # -> bool:
        ...
    
    def edit_redo(self): # -> None:
        ...
    
    def edit_reset(self): # -> None:
        ...
    
    def edit_separator(self): # -> None:
        ...
    
    def edit_undo(self): # -> None:
        ...
    
    def image_create(self, index, **kwargs):
        ...
    
    def image_cget(self, index, option):
        ...
    
    def image_configure(self, index):
        ...
    
    def image_names(self):
        ...
    
    def index(self, i): # -> str:
        ...
    
    def mark_gravity(self, mark, gravity=...): # -> Literal['left', 'right']:
        ...
    
    def mark_names(self): # -> tuple[str, ...]:
        ...
    
    def mark_next(self, index): # -> str | None:
        ...
    
    def mark_previous(self, index): # -> str | None:
        ...
    
    def mark_set(self, mark, index): # -> None:
        ...
    
    def mark_unset(self, mark): # -> None:
        ...
    
    def scan_dragto(self, x, y): # -> None:
        ...
    
    def scan_mark(self, x, y): # -> None:
        ...
    
    def search(self, pattern, index, *args, **kwargs): # -> str:
        ...
    
    def see(self, index): # -> None:
        ...
    
    def tag_add(self, tagName, index1, index2=...): # -> None:
        ...
    
    def tag_bind(self, tagName, sequence, func, add=...):
        ...
    
    def tag_cget(self, tagName, option):
        ...
    
    def tag_config(self, tagName, **kwargs):
        ...
    
    def tag_delete(self, *tagName): # -> None:
        ...
    
    def tag_lower(self, tagName, belowThis=...): # -> None:
        ...
    
    def tag_names(self, index=...): # -> tuple[str, ...]:
        ...
    
    def tag_nextrange(self, tagName, index1, index2=...): # -> tuple[str, str] | tuple[()]:
        ...
    
    def tag_prevrange(self, tagName, index1, index2=...): # -> tuple[str, str] | tuple[()]:
        ...
    
    def tag_raise(self, tagName, aboveThis=...): # -> None:
        ...
    
    def tag_ranges(self, tagName): # -> tuple[Tcl_Obj, ...]:
        ...
    
    def tag_remove(self, tagName, index1, index2=...): # -> None:
        ...
    
    def tag_unbind(self, tagName, sequence, funcid=...): # -> None:
        ...
    
    def window_cget(self, index, option):
        ...
    
    def window_configure(self, index, option):
        ...
    
    def window_create(self, index, **kwargs):
        ...
    
    def window_names(self):
        ...
    
    def xview(self, *args):
        ...
    
    def xview_moveto(self, fraction): # -> None:
        ...
    
    def xview_scroll(self, n, what): # -> None:
        ...
    
    def yview(self, *args):
        ...
    
    def yview_moveto(self, fraction): # -> None:
        ...
    
    def yview_scroll(self, n, what): # -> None:
        ...
    


