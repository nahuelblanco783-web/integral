"""
This type stub file was generated by pyright.
"""

import tkinter
from typing import Any, Optional, Tuple, Union
from .core_widget_classes import CTkBaseClass
from .font import CTkFont

class CTkEntry(CTkBaseClass):
    """
    Entry with rounded corners, border, textvariable support, focus and placeholder.
    For detailed information check out the documentation.
    """
    _minimum_x_padding = ...
    _valid_tk_entry_attributes = ...
    def __init__(self, master: Any, width: int = ..., height: int = ..., corner_radius: Optional[int] = ..., border_width: Optional[int] = ..., bg_color: Union[str, Tuple[str, str]] = ..., fg_color: Optional[Union[str, Tuple[str, str]]] = ..., border_color: Optional[Union[str, Tuple[str, str]]] = ..., text_color: Optional[Union[str, Tuple[str, str]]] = ..., placeholder_text_color: Optional[Union[str, Tuple[str, str]]] = ..., textvariable: Union[tkinter.Variable, None] = ..., placeholder_text: Union[str, None] = ..., font: Optional[Union[tuple, CTkFont]] = ..., state: str = ..., **kwargs) -> None:
        ...
    
    def destroy(self): # -> None:
        ...
    
    def configure(self, require_redraw=..., **kwargs): # -> None:
        ...
    
    def cget(self, attribute_name: str) -> any:
        ...
    
    def bind(self, sequence=..., command=..., add=...): # -> None:
        """ called on the tkinter.Entry """
        ...
    
    def unbind(self, sequence=..., funcid=...): # -> None:
        """ called on the tkinter.Entry """
        ...
    
    def delete(self, first_index, last_index=...): # -> None:
        ...
    
    def insert(self, index, string): # -> None:
        ...
    
    def get(self): # -> str:
        ...
    
    def focus(self): # -> None:
        ...
    
    def focus_set(self): # -> None:
        ...
    
    def focus_force(self): # -> None:
        ...
    
    def index(self, index): # -> int:
        ...
    
    def icursor(self, index): # -> None:
        ...
    
    def select_adjust(self, index): # -> None:
        ...
    
    def select_from(self, index): # -> None:
        ...
    
    def select_clear(self): # -> None:
        ...
    
    def select_present(self): # -> bool:
        ...
    
    def select_range(self, start_index, end_index): # -> None:
        ...
    
    def select_to(self, index): # -> None:
        ...
    
    def xview(self, index):
        ...
    
    def xview_moveto(self, f): # -> None:
        ...
    
    def xview_scroll(self, number, what): # -> None:
        ...
    


