"""
This type stub file was generated by pyright.
"""

import tkinter
from typing import Any, Callable, List, Optional, Tuple, Union
from .core_widget_classes import CTkBaseClass
from .font import CTkFont

class CTkComboBox(CTkBaseClass):
    """
    Combobox with dropdown menu, rounded corners, border, variable support.
    For detailed information check out the documentation.
    """
    def __init__(self, master: Any, width: int = ..., height: int = ..., corner_radius: Optional[int] = ..., border_width: Optional[int] = ..., bg_color: Union[str, Tuple[str, str]] = ..., fg_color: Optional[Union[str, Tuple[str, str]]] = ..., border_color: Optional[Union[str, Tuple[str, str]]] = ..., button_color: Optional[Union[str, Tuple[str, str]]] = ..., button_hover_color: Optional[Union[str, Tuple[str, str]]] = ..., dropdown_fg_color: Optional[Union[str, Tuple[str, str]]] = ..., dropdown_hover_color: Optional[Union[str, Tuple[str, str]]] = ..., dropdown_text_color: Optional[Union[str, Tuple[str, str]]] = ..., text_color: Optional[Union[str, Tuple[str, str]]] = ..., text_color_disabled: Optional[Union[str, Tuple[str, str]]] = ..., font: Optional[Union[tuple, CTkFont]] = ..., dropdown_font: Optional[Union[tuple, CTkFont]] = ..., values: Optional[List[str]] = ..., state: str = ..., hover: bool = ..., variable: Union[tkinter.Variable, None] = ..., command: Union[Callable[[str], Any], None] = ..., justify: str = ..., **kwargs) -> None:
        ...
    
    def destroy(self): # -> None:
        ...
    
    def configure(self, require_redraw=..., **kwargs): # -> None:
        ...
    
    def cget(self, attribute_name: str) -> any:
        ...
    
    def set(self, value: str): # -> None:
        ...
    
    def get(self) -> str:
        ...
    
    def bind(self, sequence=..., command=..., add=...): # -> None:
        """ called on the tkinter.Entry """
        ...
    
    def unbind(self, sequence=..., funcid=...): # -> None:
        """ called on the tkinter.Entry """
        ...
    
    def focus(self): # -> None:
        ...
    
    def focus_set(self): # -> None:
        ...
    
    def focus_force(self): # -> None:
        ...
    


