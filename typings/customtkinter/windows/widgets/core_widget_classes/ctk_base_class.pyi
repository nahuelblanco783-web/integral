"""
This type stub file was generated by pyright.
"""

import tkinter
from typing import Any, Tuple, TypedDict, Union
from ..appearance_mode import CTkAppearanceModeBaseClass
from ..scaling import CTkScalingBaseClass

class CTkBaseClass(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):
    """ Base class of every CTk widget, handles the dimensions, bg_color,
        appearance_mode changes, scaling, bg changes of master if master is not a CTk widget """
    _valid_tk_frame_attributes: set = ...
    _cursor_manipulation_enabled: bool = ...
    def __init__(self, master: Any, width: int = ..., height: int = ..., bg_color: Union[str, Tuple[str, str]] = ..., **kwargs) -> None:
        class GeometryCallDict(TypedDict):
            ...
        
        
    
    def destroy(self): # -> None:
        """ Destroy this and all descendants widgets. """
        ...
    
    def config(self, *args, **kwargs):
        ...
    
    def configure(self, require_redraw=..., **kwargs): # -> None:
        """ basic configure with bg_color, width, height support, calls configure of tkinter.Frame, updates in the end """
        ...
    
    def cget(self, attribute_name: str): # -> str | Tuple[str, str] | int | Any:
        """ basic cget with bg_color, width, height support, calls cget of tkinter.Frame """
        ...
    
    def bind(self, sequence=..., command=..., add=...):
        ...
    
    def unbind(self, sequence=..., funcid=...):
        ...
    
    def unbind_all(self, sequence):
        ...
    
    def bind_all(self, sequence=..., func=..., add=...):
        ...
    
    def place(self, **kwargs): # -> None:
        """
        Place a widget in the parent widget. Use as options:
        in=master - master relative to which the widget is placed
        in_=master - see 'in' option description
        x=amount - locate anchor of this widget at position x of master
        y=amount - locate anchor of this widget at position y of master
        relx=amount - locate anchor of this widget between 0.0 and 1.0 relative to width of master (1.0 is right edge)
        rely=amount - locate anchor of this widget between 0.0 and 1.0 relative to height of master (1.0 is bottom edge)
        anchor=NSEW (or subset) - position anchor according to given direction
        width=amount - width of this widget in pixel
        height=amount - height of this widget in pixel
        relwidth=amount - width of this widget between 0.0 and 1.0 relative to width of master (1.0 is the same width as the master)
        relheight=amount - height of this widget between 0.0 and 1.0 relative to height of master (1.0 is the same height as the master)
        bordermode="inside" or "outside" - whether to take border width of master widget into account
        """
        ...
    
    def place_forget(self): # -> None:
        """ Unmap this widget. """
        ...
    
    def pack(self, **kwargs): # -> None:
        """
        Pack a widget in the parent widget. Use as options:
        after=widget - pack it after you have packed widget
        anchor=NSEW (or subset) - position widget according to given direction
        before=widget - pack it before you will pack widget
        expand=bool - expand widget if parent size grows
        fill=NONE or X or Y or BOTH - fill widget if widget grows
        in=master - use master to contain this widget
        in_=master - see 'in' option description
        ipadx=amount - add internal padding in x direction
        ipady=amount - add internal padding in y direction
        padx=amount - add padding in x direction
        pady=amount - add padding in y direction
        side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
        """
        ...
    
    def pack_forget(self): # -> None:
        """ Unmap this widget and do not use it for the packing order. """
        ...
    
    def grid(self, **kwargs): # -> None:
        """
        Position a widget in the parent widget in a grid. Use as options:
        column=number - use cell identified with given column (starting with 0)
        columnspan=number - this widget will span several columns
        in=master - use master to contain this widget
        in_=master - see 'in' option description
        ipadx=amount - add internal padding in x direction
        ipady=amount - add internal padding in y direction
        padx=amount - add padding in x direction
        pady=amount - add padding in y direction
        row=number - use cell identified with given row (starting with 0)
        rowspan=number - this widget will span several rows
        sticky=NSEW - if cell is larger on which sides will this widget stick to the cell boundary
        """
        ...
    
    def grid_forget(self): # -> None:
        """ Unmap this widget. """
        ...
    


