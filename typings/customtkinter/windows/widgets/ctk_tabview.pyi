"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, List, Optional, Tuple, Union
from .ctk_frame import CTkFrame
from .core_widget_classes import CTkBaseClass

class CTkTabview(CTkBaseClass):
    """
    Tabview...
    For detailed information check out the documentation.
    """
    _outer_spacing: int = ...
    _outer_button_overhang: int = ...
    _button_height: int = ...
    _segmented_button_border_width: int = ...
    def __init__(self, master: Any, width: int = ..., height: int = ..., corner_radius: Optional[int] = ..., border_width: Optional[int] = ..., bg_color: Union[str, Tuple[str, str]] = ..., fg_color: Optional[Union[str, Tuple[str, str]]] = ..., border_color: Optional[Union[str, Tuple[str, str]]] = ..., segmented_button_fg_color: Optional[Union[str, Tuple[str, str]]] = ..., segmented_button_selected_color: Optional[Union[str, Tuple[str, str]]] = ..., segmented_button_selected_hover_color: Optional[Union[str, Tuple[str, str]]] = ..., segmented_button_unselected_color: Optional[Union[str, Tuple[str, str]]] = ..., segmented_button_unselected_hover_color: Optional[Union[str, Tuple[str, str]]] = ..., text_color: Optional[Union[str, Tuple[str, str]]] = ..., text_color_disabled: Optional[Union[str, Tuple[str, str]]] = ..., command: Union[Callable, Any] = ..., anchor: str = ..., state: str = ..., **kwargs) -> None:
        ...
    
    def winfo_children(self) -> List[any]:
        """
        winfo_children of CTkTabview without canvas and segmented button widgets,
        because it's not a child but part of the CTkTabview itself
        """
        ...
    
    def configure(self, require_redraw=..., **kwargs): # -> None:
        ...
    
    def cget(self, attribute_name: str): # -> int | str | tuple[Any, Any] | list[Any] | Callable[..., Any] | Any | Tuple[str, str]:
        ...
    
    def tab(self, name: str) -> CTkFrame:
        """ returns reference to the tab with given name """
        ...
    
    def insert(self, index: int, name: str) -> CTkFrame:
        """ creates new tab with given name at position index """
        ...
    
    def add(self, name: str) -> CTkFrame:
        """ appends new tab with given name """
        ...
    
    def index(self, name) -> int:
        """ get index of tab with given name """
        ...
    
    def move(self, new_index: int, name: str): # -> None:
        ...
    
    def rename(self, old_name: str, new_name: str): # -> None:
        ...
    
    def delete(self, name: str): # -> None:
        """ delete tab by name """
        ...
    
    def set(self, name: str): # -> None:
        """ select tab by name """
        ...
    
    def get(self) -> str:
        """ returns name of selected tab, returns empty string if no tab selected """
        ...
    


