"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, Union
from ..core_rendering import CTkCanvas

if TYPE_CHECKING:
    ...
class DrawEngine:
    """
    This is the core of the CustomTkinter library where all the drawing on the tkinter.Canvas happens.
    A year of experimenting and trying out different drawing methods have led to the current state of this
    class, and I don't think there's much I can do to make the rendering look better than this with the
    limited capabilities the tkinter.Canvas offers.

    Functions:
     - draw_rounded_rect_with_border()
     - draw_rounded_rect_with_border_vertical_split()
     - draw_rounded_progress_bar_with_border()
     - draw_rounded_slider_with_border_and_button()
     - draw_rounded_scrollbar()
     - draw_checkmark()
     - draw_dropdown_arrow()

    """
    preferred_drawing_method: str = ...
    def __init__(self, canvas: CTkCanvas) -> None:
        ...
    
    def set_round_to_even_numbers(self, round_width_to_even_numbers: bool = ..., round_height_to_even_numbers: bool = ...): # -> None:
        ...
    
    def draw_background_corners(self, width: Union[float, int], height: Union[float, int]): # -> bool:
        ...
    
    def draw_rounded_rect_with_border(self, width: Union[float, int], height: Union[float, int], corner_radius: Union[float, int], border_width: Union[float, int], overwrite_preferred_drawing_method: str = ...) -> bool:
        """ Draws a rounded rectangle with a corner_radius and border_width on the canvas. The border elements have a 'border_parts' tag,
            the main foreground elements have an 'inner_parts' tag to color the elements accordingly.

            returns bool if recoloring is necessary """
        ...
    
    def draw_rounded_rect_with_border_vertical_split(self, width: Union[float, int], height: Union[float, int], corner_radius: Union[float, int], border_width: Union[float, int], left_section_width: Union[float, int]) -> bool:
        """ Draws a rounded rectangle with a corner_radius and border_width on the canvas which is split at left_section_width.
            The border elements have the tags 'border_parts_left', 'border_parts_lright',
            the main foreground elements have an 'inner_parts_left' and inner_parts_right' tag,
            to color the elements accordingly.

            returns bool if recoloring is necessary """
        ...
    
    def draw_rounded_progress_bar_with_border(self, width: Union[float, int], height: Union[float, int], corner_radius: Union[float, int], border_width: Union[float, int], progress_value_1: float, progress_value_2: float, orientation: str) -> bool:
        """ Draws a rounded bar on the canvas, and onntop sits a progress bar from value 1 to value 2 (range 0-1, left to right, bottom to top).
            The border elements get the 'border_parts' tag", the main elements get the 'inner_parts' tag and
            the progress elements get the 'progress_parts' tag. The 'orientation' argument defines from which direction the progress starts (n, w, s, e).

            returns bool if recoloring is necessary """
        ...
    
    def draw_rounded_slider_with_border_and_button(self, width: Union[float, int], height: Union[float, int], corner_radius: Union[float, int], border_width: Union[float, int], button_length: Union[float, int], button_corner_radius: Union[float, int], slider_value: float, orientation: str) -> bool:
        ...
    
    def draw_rounded_scrollbar(self, width: Union[float, int], height: Union[float, int], corner_radius: Union[float, int], border_spacing: Union[float, int], start_value: float, end_value: float, orientation: str) -> bool:
        ...
    
    def draw_checkmark(self, width: Union[float, int], height: Union[float, int], size: Union[int, float]) -> bool:
        """ Draws a rounded rectangle with a corner_radius and border_width on the canvas. The border elements have a 'border_parts' tag,
            the main foreground elements have an 'inner_parts' tag to color the elements accordingly.

            returns bool if recoloring is necessary """
        ...
    
    def draw_dropdown_arrow(self, x_position: Union[int, float], y_position: Union[int, float], size: Union[int, float]) -> bool:
        """ Draws a dropdown bottom facing arrow at (x_position, y_position) in a given size

            returns bool if recoloring is necessary """
        ...
    


