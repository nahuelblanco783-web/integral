"""
This type stub file was generated by pyright.
"""

import tkinter
from typing import Tuple, Union

class CTkCanvas(tkinter.Canvas):
    """
    Canvas with additional functionality to draw antialiased circles on Windows/Linux.

    Call .init_font_character_mapping() at program start to load the correct character
    dictionary according to the operating system. Characters (circle sizes) are optimised
    to look best for rendering CustomTkinter shapes on the different operating systems.

    - .create_aa_circle() creates antialiased circle and returns int identifier.
    - .coords() is modified to support the aa-circle shapes correctly like you would expect.
    - .itemconfig() is also modified to support aa-cricle shapes.

    The aa-circles are created by choosing a character from the custom created and loaded
    font 'CustomTkinter_shapes_font'. It contains circle shapes with different sizes filling
    either the whole character space or just pert of it (characters A to R). Circles with a smaller
    radius need a smaller circle character to look correct when rendered on the canvas.

    For an optimal result, the draw-engine creates two aa-circles on top of each other, while
    one is rotated by 90 degrees. This helps to make the circle look more symetric, which is
    not can be a problem when using only a single circle character.
    """
    radius_to_char_fine: dict = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def init_font_character_mapping(cls): # -> None:
        """ optimizations made for Windows 10, 11 only """
        ...
    
    def create_aa_circle(self, x_pos: int, y_pos: int, radius: int, angle: int = ..., fill: str = ..., tags: Union[str, Tuple[str, ...]] = ..., anchor: str = ...) -> int:
        ...
    
    def coords(self, tag_or_id, *args): # -> None:
        ...
    
    def itemconfig(self, tag_or_id, *args, **kwargs): # -> None:
        ...
    


