"""
This type stub file was generated by pyright.
"""

import tkinter
from typing import Any, Callable, Literal, Optional, Tuple, Union
from .core_widget_classes import CTkBaseClass

class CTkProgressBar(CTkBaseClass):
    """
    Progressbar with rounded corners, border, variable support,
    indeterminate mode, vertical orientation.
    For detailed information check out the documentation.
    """
    def __init__(self, master: Any, width: Optional[int] = ..., height: Optional[int] = ..., corner_radius: Optional[int] = ..., border_width: Optional[int] = ..., bg_color: Union[str, Tuple[str, str]] = ..., fg_color: Optional[Union[str, Tuple[str, str]]] = ..., border_color: Optional[Union[str, Tuple[str, str]]] = ..., progress_color: Optional[Union[str, Tuple[str, str]]] = ..., variable: Union[tkinter.Variable, None] = ..., orientation: str = ..., mode: Literal["determinate", "indeterminate"] = ..., determinate_speed: float = ..., indeterminate_speed: float = ..., **kwargs) -> None:
        ...
    
    def destroy(self): # -> None:
        ...
    
    def configure(self, require_redraw=..., **kwargs): # -> None:
        ...
    
    def cget(self, attribute_name: str) -> any:
        ...
    
    def set(self, value, from_variable_callback=...): # -> None:
        """ set determinate value """
        ...
    
    def get(self) -> float:
        """ get determinate value """
        ...
    
    def start(self): # -> None:
        """ start automatic mode """
        ...
    
    def stop(self): # -> None:
        """ stop automatic mode """
        ...
    
    def step(self): # -> None:
        """ increase progress """
        ...
    
    def bind(self, sequence: str = ..., command: Callable = ..., add: Union[str, bool] = ...): # -> None:
        """ called on the tkinter.Canvas """
        ...
    
    def unbind(self, sequence: str = ..., funcid: str = ...):
        """ called on the tkinter.Label and tkinter.Canvas """
        ...
    
    def focus(self):
        ...
    
    def focus_set(self): # -> None:
        ...
    
    def focus_force(self): # -> None:
        ...
    


